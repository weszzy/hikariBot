const { google } = require('googleapis');
const fs = require('fs');
const path = require('path');

// Caminho do arquivo de cache
const cacheFilePath = path.resolve(__dirname, '../cache/recommendedBooksCache.json');

// Inicializa o cache de livros recomendados
let recommendedBooksCache = new Set();
try {
    if (fs.existsSync(cacheFilePath)) {
        const cacheData = fs.readFileSync(cacheFilePath, 'utf-8');
        const parsedData = JSON.parse(cacheData);
        if (Array.isArray(parsedData)) {
            recommendedBooksCache = new Set(parsedData);
        }
    }
} catch (err) {
    console.error('Erro ao carregar o cache de livros recomendados:', err);
    recommendedBooksCache = new Set();
}

// Fun√ß√£o para salvar o cache
function saveCacheRecom() {
    fs.writeFileSync(cacheFilePath, JSON.stringify([...recommendedBooksCache]), 'utf-8');
}

async function handleRecomendacaoCommand(interaction) {
    const books = google.books({ version: 'v1', auth: process.env.GOOGLE_API_KEY });

    const keywords = ['livros populares', 'mais vendido', 'evang√©lico', 'adventista', 'bestseller', 'intrinseca', 'sextante', 'Penguin Cl√°ssicos']; // Pode ajustar para incluir mais varia√ß√µes
    const minRating = 4; // Reduzido para ampliar o n√∫mero de livros
    const excludeKeywords = '-Ateu -Cat√≥lico'; // Palavras-chave a serem exclu√≠das

    let startIndex = 0;
    const maxResults = 40;
    let booksData = [];

    try {
        while (booksData.length === 0 && startIndex < 200) { // Limite de 200 para evitar loops infinitos
            const query = keywords.length > 0 ? keywords.join(' ') : 'livros';
            const res = await books.volumes.list({
                q: `${query} ${excludeKeywords}`,
                orderBy: 'relevance',
                maxResults: maxResults,
                startIndex: startIndex,
                langRestrict: 'pt-BR', // Restri√ß√£o para livros em portugu√™s do Brasil
            });

            booksData = res.data.items ? res.data.items.filter(book => !recommendedBooksCache.has(book.id)) : [];
            startIndex += maxResults;
        }

        if (!booksData || booksData.length === 0) {
            recommendedBooksCache.clear();
            saveCacheRecom();
            await interaction.editReply('Todos os livros j√° foram recomendados. Reiniciando a lista!');
            return;
        }

        const randomBook = booksData[Math.floor(Math.random() * booksData.length)];
        recommendedBooksCache.add(randomBook.id);
        saveCacheRecom();

        const bookInfo = formatBookInfo(randomBook.volumeInfo);
        await interaction.editReply({ content: `üìö Recomenda√ß√£o aleat√≥ria:\n\n${bookInfo}` });

    } catch (error) {
        console.error('Erro ao buscar recomenda√ß√£o de livro:', error);
        await interaction.editReply({ content: 'Desculpe, n√£o foi poss√≠vel encontrar uma recomenda√ß√£o de livro no momento. Por favor, tente novamente mais tarde.' });
    }
}

function formatBookInfo(volumeInfo) {
    const title = volumeInfo.title || 'T√≠tulo n√£o dispon√≠vel';
    const authors = volumeInfo.authors ? volumeInfo.authors.join(', ') : 'Autor(es) n√£o dispon√≠vel';
    const description = volumeInfo.description ? volumeInfo.description.substring(0, 300) + '...' : 'Descri√ß√£o n√£o dispon√≠vel';
    const link = volumeInfo.previewLink || volumeInfo.infoLink || 'Link n√£o dispon√≠vel';

    return `**${title}**\nüë• Autores: ${authors}\nüìñ ${description}\nüîó Mais informa√ß√µes: [Link](${link})`;
}





module.exports = { handleRecomendacaoCommand };
